#include<bits/stdc++.h>

using namespace std;

vector<int > adj[105*105];
bool vis[105*105];

void dfs(int u){
    vis[u]=true;
    int sz=adj[u].size();
    for(int i=0;i<sz;i++){
        int v=adj[u][i];
        if(!vis[v])
            dfs(v);
    }
    return ;
}
int main()
{
    memset(vis,false,sizeof(vis));
    int n,m;
    while(scanf("%d%d",&n,&m)==2&&n>0){
        char grid[105*105];
        int cont=0;
        getchar();
        for(int i=1;i<=n*m;i++)
            cin>>grid[i];
        for(int i=1;i<=n*m;i++){
            if(grid[i]=='@'){
            if(((i-1)%m)!=0&&(i-1)>0&&grid[i-1]=='@')
                adj[i].push_back(i-1);
           if(((i+1)%m)!=1&&(i+1)<=n*m&&grid[i+1]=='@')
                adj[i].push_back(i+1);
            if((i-m)>0&&grid[i-m]=='@')
                adj[i].push_back(i-m);
            if(((i-m-1)%m)!=0&&(i-m-1)>0&&grid[i-m-1]=='@')
                adj[i].push_back(i-m-1);
            if(((i-m+1)%m)!=1&&(i-m)>0&&grid[i-m+1]=='@')
                adj[i].push_back(i-m+1);
            if((i+m)<=n*m&&grid[i+m]=='@')
                adj[i].push_back(i+m);
            if(((i+m-1)%m!=0)&&(i+m)<=n*m&&grid[i+m-1]=='@')
                adj[i].push_back(i+m-1);
            if(((i+m+1)%m)!=1&&(i+m+1)<=n*m&&grid[i+m+1]=='@')
                adj[i].push_back(i+m+1);
            }
        }
        for(int i=1;i<=n*m;i++){
            if(grid[i]=='@'&&!vis[i]){
                cont++;
                dfs(i);
            }
        }
        cout<<cont<<endl;
        for(int i=1;i<=n*m;i++){
            adj[i].clear();
            vis[i]=false;
        }
    }
    return 0;
}
